#pragma once
#include"MeveralUse_HeadersUsual.h"
/****************************************
*141.环形链表
给定一个链表，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。

如果链表中存在环，则返回 true 。 否则，返回 false 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/linked-list-cycle
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
***************************************/
using namespace std;


//Definition for singly-linked list.
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public:
	bool hasCycle(ListNode *head)
	{
		if (head == NULL)
			return 0;

		ListNode* accessed = new ListNode(1);
		ListNode* node = head;
		ListNode* tmp = NULL;
		while (node != NULL)
		{
			if (node->next == accessed)
				return 1;
			else
			{
				tmp = node->next;
				node->next = accessed;
				node = tmp;
			}
		}

		return 0;
	}
};
