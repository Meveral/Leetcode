#pragma once
/****************************************
*328. 奇偶链表
给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。

请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

示例 1:

输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL
示例 2:

输入: 2->1->3->5->6->4->7->NULL
输出: 2->3->6->7->1->5->4->NULL
说明:

应当保持奇数节点和偶数节点的相对顺序。
链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/odd-even-linked-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

***************************************/


//Definition for singly-linked list.
struct ListNode {
	int val;
	ListNode *next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
	ListNode* oddEvenList(ListNode* head)
	{
		if (head == nullptr)
			return nullptr;
		else if (head->next == nullptr)
			return head;

		ListNode* odd_node = head;
		ListNode* even_node = head->next;
		ListNode* first_even_node = even_node;

		ListNode* tmp_node = even_node->next;
		int sign = 1;
		while (tmp_node != nullptr)
		{
			if ((sign % 2) == 1)
			{
				odd_node->next = tmp_node;
				odd_node = tmp_node;
				++sign;
			}
			else
			{
				even_node->next = tmp_node;
				even_node = tmp_node;
				++sign;
			}
			tmp_node = tmp_node->next;
		}
		even_node->next = nullptr;
		odd_node->next = first_even_node;
		return head;
	}
};

