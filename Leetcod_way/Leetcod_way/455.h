#pragma once
/****************************************
*455.分发饼干 
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

 
示例 1:

输入: g = [1,2,3], s = [1,1]
输出: 1
解释:
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
示例 2:

输入: g = [1,2], s = [1,2,3]
输出: 2
解释:
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
 

提示：

1 <= g.length <= 3 * 104
0 <= s.length <= 3 * 104
1 <= g[i], s[j] <= 231 - 1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/assign-cookies
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
***************************************/
#include<MeveralUse_HeadersUsual.h>
using namespace std;

/****************************************
最显而易见的一种思路,排序+双指针:
	排序（升序）
	初始化两个指针分别指向数组头
	while（指针不为尾后）
		判断*p_s>=*p_g
			若是，则饼干够大，胃口可满足，ret++，两个指针均后移
			若否，则饼干不够大，p_s后移，看是否有更大的饼干
	当某个指针移动到尾后，循环结束，这样优先保证了胃口小的孩子尽量先吃小饼干。
思路很简单，复杂度显而易见，为排序的复杂度O(NlogN),肯定有常数复杂度的解法。


 
***************************************/
class Solution {
public:



	int findContentChildren(vector<int>& g, vector<int>& s) 
	{
		if (g.empty() || s.empty())
			return 0;

		int ret{ 0 };
		sort(g.begin(), g.end());
		sort(s.begin(), s.end());
		auto p_g = g.begin();
		auto p_s = s.begin();
		while (p_g != g.end() && p_s != s.end())
		{
			if (*p_s >= *p_g)
			{
				++ret;
				++p_s;
				++p_g;
			}
			else
				++p_s;
		}
		return ret;
			

	}
};



